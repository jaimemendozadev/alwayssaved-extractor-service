name: Deploy Notecasts Extractor Service

on:
  workflow_dispatch:  # ✅ Manual trigger from GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH for GitHub Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/notecasts-key.pem
          chmod 600 ~/.ssh/notecasts-key.pem
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/notecasts-key.pem
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Setup SSH for GitHub
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Deploy Extractor Service to EC2
        run: |
          ssh -i ~/.ssh/notecasts-key.pem -o IdentitiesOnly=yes -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # 🚀 Force a real login shell
          set -e  # Stop on first error
          sudo su - ec2-user << 'INNER_EOF'

          # ✅ Explicitly define PATH so Git is always found
          export PATH="/sbin:/bin:/usr/sbin:/usr/bin:$HOME/.local/bin"

          # ✅ Switch to home directory
          cd /home/ec2-user

          # ✅ Install dependencies using full paths
          /usr/bin/sudo /usr/bin/yum update -y
          /usr/bin/sudo /usr/bin/yum install -y git ffmpeg python3 python3-pip

          # ✅ Verify Git is installed using full path
          if ! /usr/bin/which git; then
            echo "❌ Git is missing! Exiting..."
            exit 1
          fi

          # ✅ Ensure Pipenv is installed
          /usr/bin/python3 -m pip install --user pipenv
          export PATH="\$HOME/.local/bin:\$PATH"

          # ✅ Handle existing directory to prevent clone errors
          if [ -d "notecasts-extractor-service" ]; then
            echo "⚠️ Directory already exists. Checking for .git folder..."
            if [ ! -d "notecasts-extractor-service/.git" ]; then
              echo "🚨 Partial clone detected! Removing directory..."
              /bin/rm -rf notecasts-extractor-service
            fi
          fi

          # ✅ Create project directory if it doesn’t exist
          /bin/mkdir -p notecasts-extractor-service
          cd notecasts-extractor-service

          # ✅ Clone repo if not present, otherwise pull latest changes using SSH
          if [ ! -d ".git" ]; then
            echo "📂 Cloning repository..."
            GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes" /usr/bin/git clone git@github.com:jaimemendozadev/notecasts-extractor-service.git .
          else
            echo "🔄 Pulling latest changes..."
            GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes" /usr/bin/git pull origin main
          fi

          # ✅ Install dependencies using full path
          /home/ec2-user/.local/bin/pipenv install

          # ✅ Start the service in the background
          nohup /home/ec2-user/.local/bin/pipenv run python service.py > output.log 2>&1 &

          INNER_EOF
          EOF
